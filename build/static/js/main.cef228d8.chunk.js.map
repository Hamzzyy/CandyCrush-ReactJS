{"version":3,"sources":["images/blank.png","images/blue-candy.png","images/green-candy.png","images/orange-candy.png","images/purple-candy.png","images/red-candy.png","images/yellow-candy.png","components/ScoreBoard.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","ScoreBoard","_ref","score","React","createElement","className","candyColors","blueCandy","orangeCandy","purpleCandy","redCandy","yellowCandy","greenCandy","App","_useState","useState","_useState2","_slicedToArray","currentColorArrangement","setCurrentColorArrangement","_useState3","_useState4","squareBeingDragged","setSquareBeingDragged","_useState5","_useState6","squareBeingReplaced","setSquareBeingReplaced","_useState7","_useState8","scoreDisplay","setScoreDisplay","checkForColumnOfFour","_loop","columnOfFour","i","width","decidedColor","isBlank","blank","every","square","forEach","v","_ret","checkForRowOfFour","_loop2","rowOfFour","includes","_ret2","checkForColumnOfThree","_loop3","columnOfThree","_ret3","checkForRowOfThree","_loop4","rowOfThree","_ret4","moveIntoSquareBelow","randomNumber","Math","floor","random","length","dragStart","e","target","dragDrop","dragEnd","squareBeingDraggedId","parseInt","getAttribute","squareBeingReplacedId","originalColorArrangement","_toConsumableArray","validMove","isAColumnOfFour","isARowOfFour","isAColumnOfThree","isARowOfThree","useEffect","randomColorArrangement","randomColor","push","createBoard","timer","setInterval","clearInterval","map","candyColor","index","key","src","alt","data-id","draggable","onDragStart","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","onDragEnd","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cef228d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/blank.75f97e04.png\";","module.exports = __webpack_public_path__ + \"static/media/blue-candy.a58ef5ce.png\";","module.exports = __webpack_public_path__ + \"static/media/green-candy.6e0fe0a2.png\";","module.exports = __webpack_public_path__ + \"static/media/orange-candy.87a15a77.png\";","module.exports = __webpack_public_path__ + \"static/media/purple-candy.7d273338.png\";","module.exports = __webpack_public_path__ + \"static/media/red-candy.15b06a2e.png\";","module.exports = __webpack_public_path__ + \"static/media/yellow-candy.6a81bb59.png\";","import React from 'react';\r\nconst ScoreBoard = ({ score }) => {\r\n  return (\r\n    <div className=\"score-board\">\r\n      <h2>{score}</h2>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ScoreBoard","import React, { useState, useEffect } from 'react'\r\nimport ScoreBoard from './components/ScoreBoard'\r\nimport blueCandy from './images/blue-candy.png'\r\nimport greenCandy from './images/green-candy.png'\r\nimport orangeCandy from './images/orange-candy.png'\r\nimport purpleCandy from './images/purple-candy.png'\r\nimport redCandy from './images/red-candy.png'\r\nimport yellowCandy from './images/yellow-candy.png'\r\nimport blank from './images/blank.png'\r\n\r\nconst width = 8\r\nconst candyColors = [\r\n    blueCandy,\r\n    orangeCandy,\r\n    purpleCandy,\r\n    redCandy,\r\n    yellowCandy,\r\n    greenCandy\r\n]\r\n\r\nconst App = () => {\r\n    const [currentColorArrangement, setCurrentColorArrangement] = useState([])\r\n    const [squareBeingDragged, setSquareBeingDragged] = useState(null)\r\n    const [squareBeingReplaced, setSquareBeingReplaced] = useState(null)\r\n    const [scoreDisplay, setScoreDisplay] = useState(0)\r\n\r\n    const checkForColumnOfFour = () => {\r\n        for (let i = 0; i <= 39; i++) {\r\n            const columnOfFour = [i, i + width, i + width * 2, i + width * 3]\r\n            const decidedColor = currentColorArrangement[i]\r\n            const isBlank = currentColorArrangement[i] === blank\r\n\r\n            if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n                setScoreDisplay((score) => score + 4)\r\n                columnOfFour.forEach(square => currentColorArrangement[square] = blank)\r\n                return true\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkForRowOfFour = () => {\r\n        for (let i = 0; i < 64; i++) {\r\n            const rowOfFour = [i, i + 1, i + 2, i + 3]\r\n            const decidedColor = currentColorArrangement[i]\r\n            const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64]\r\n            const isBlank = currentColorArrangement[i] === blank\r\n\r\n            if (notValid.includes(i)) continue\r\n\r\n            if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n                setScoreDisplay((score) => score + 4)\r\n                rowOfFour.forEach(square => currentColorArrangement[square] = blank)\r\n                return true\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkForColumnOfThree = () => {\r\n        for (let i = 0; i <= 47; i++) {\r\n            const columnOfThree = [i, i + width, i + width * 2]\r\n            const decidedColor = currentColorArrangement[i]\r\n            const isBlank = currentColorArrangement[i] === blank\r\n\r\n            if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n                setScoreDisplay((score) => score + 3)\r\n                columnOfThree.forEach(square => currentColorArrangement[square] = blank)\r\n                return true\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkForRowOfThree = () => {\r\n        for (let i = 0; i < 64; i++) {\r\n            const rowOfThree = [i, i + 1, i + 2]\r\n            const decidedColor = currentColorArrangement[i]\r\n            const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64]\r\n            const isBlank = currentColorArrangement[i] === blank\r\n\r\n            if (notValid.includes(i)) continue\r\n\r\n            if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\r\n                setScoreDisplay((score) => score + 3)\r\n                rowOfThree.forEach(square => currentColorArrangement[square] = blank)\r\n                return true\r\n            }\r\n        }\r\n    }\r\n\r\n    const moveIntoSquareBelow = () => {\r\n        for (let i = 0; i <= 55; i++) {\r\n            const firstRow = [0, 1, 2, 3, 4, 5, 6, 7]\r\n            const isFirstRow = firstRow.includes(i)\r\n\r\n            if (isFirstRow && currentColorArrangement[i] === blank) {\r\n                let randomNumber = Math.floor(Math.random() * candyColors.length)\r\n                currentColorArrangement[i] = candyColors[randomNumber]\r\n            }\r\n\r\n            if ((currentColorArrangement[i + width]) === blank) {\r\n                currentColorArrangement[i + width] = currentColorArrangement[i]\r\n                currentColorArrangement[i] = blank\r\n            }\r\n        }\r\n    }\r\n\r\n    const dragStart = (e) => {\r\n        setSquareBeingDragged(e.target)\r\n    }\r\n    const dragDrop = (e) => {\r\n        setSquareBeingReplaced(e.target)\r\n    }\r\n    const dragEnd = () => {\r\n        const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'))\r\n        const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'))\r\n        const originalColorArrangement = [...currentColorArrangement]\r\n        currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src')\r\n        currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src')\r\n\r\n        const validMoves = [\r\n            squareBeingDraggedId - 1,\r\n            squareBeingDraggedId - width,\r\n            squareBeingDraggedId + 1,\r\n            squareBeingDraggedId + width\r\n        ]\r\n\r\n        const validMove = validMoves.includes(squareBeingReplacedId)\r\n\r\n        const isAColumnOfFour = checkForColumnOfFour()\r\n        const isARowOfFour = checkForRowOfFour()\r\n        const isAColumnOfThree = checkForColumnOfThree()\r\n        const isARowOfThree = checkForRowOfThree()\r\n\r\n        if (squareBeingReplacedId &&\r\n            validMove &&\r\n            (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)) {\r\n            setSquareBeingDragged(null)\r\n            setSquareBeingReplaced(null)\r\n        } else {\r\n            setCurrentColorArrangement([...originalColorArrangement])\r\n            currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src')\r\n            currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src')\r\n            setCurrentColorArrangement([...currentColorArrangement])\r\n        }\r\n    }\r\n\r\n\r\n    const createBoard = () => {\r\n        const randomColorArrangement = []\r\n        for (let i = 0; i < width * width; i++) {\r\n            const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)]\r\n            randomColorArrangement.push(randomColor)\r\n        }\r\n        setCurrentColorArrangement(randomColorArrangement)\r\n    }\r\n\r\n    useEffect(() => {\r\n        createBoard()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const timer = setInterval(() => {\r\n            checkForColumnOfFour()\r\n            checkForRowOfFour()\r\n            checkForColumnOfThree()\r\n            checkForRowOfThree()\r\n            moveIntoSquareBelow()\r\n            setCurrentColorArrangement([...currentColorArrangement])\r\n        }, 100)\r\n        return () => clearInterval(timer)\r\n    }, [checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow, currentColorArrangement])\r\n\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"game\">\r\n                {currentColorArrangement.map((candyColor, index) => (\r\n                    <img\r\n                        key={index}\r\n                        src={candyColor}\r\n                        alt={candyColor}\r\n                        data-id={index}\r\n                        draggable={true}\r\n                        onDragStart={dragStart}\r\n                        onDragOver={(e) => e.preventDefault()}\r\n                        onDragEnter={(e) => e.preventDefault()}\r\n                        onDragLeave={(e) => e.preventDefault()}\r\n                        onDrop={dragDrop}\r\n                        onDragEnd={dragEnd}\r\n                    />\r\n                ))}\r\n            </div>\r\n            <ScoreBoard score={scoreDisplay}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}